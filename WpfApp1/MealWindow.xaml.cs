using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Xml.Serialization;
using System.Windows.Input;
using System.Windows.Media;

namespace WpfApp1
{
    public partial class MealWindow : Window
    {
        private ObservableCollection<MealEntry> mealEntries;
        
        public class DailyCalories
        {
            public int MondayCalories { get; set; }
            public int TuesdayCalories { get; set; }
            public int WednesdayCalories { get; set; }
            public int ThursdayCalories { get; set; }
            public int FridayCalories { get; set; }
            public int SaturdayCalories { get; set; }
            public int SundayCalories { get; set; }
        }
        
        private DailyCalories dailyCalories = new DailyCalories();
        
        public class MealEntry
        {
            public string MealType { get; set; }
            public string MealIcon { get; set; }
            public string Monday { get; set; }
            public string Tuesday { get; set; }
            public string Wednesday { get; set; }
            public string Thursday { get; set; }
            public string Friday { get; set; }
            public string Saturday { get; set; }
            public string Sunday { get; set; }
        }

        public class MealPlanData
        {
            public DateTime Week { get; set; }
            public string Goal { get; set; }
            public List<MealEntry> Meals { get; set; }
        }

        public MealWindow()
        {
            InitializeComponent();
            LoadInitialData();
        }

        private void LoadInitialData()
        {
            mealEntries = new ObservableCollection<MealEntry>
            {
                new MealEntry { MealType = "–°–Ω—ñ–¥–∞–Ω–æ–∫", MealIcon = "üç≥" },
                new MealEntry { MealType = "–û–±—ñ–¥", MealIcon = "üç≤" },
                new MealEntry { MealType = "–ü–µ—Ä–µ–∫—É—Å", MealIcon = "ü•ó" },
                new MealEntry { MealType = "–í–µ—á–µ—Ä—è", MealIcon = "üçΩÔ∏è" }
            };
            MealGrid.ItemsSource = mealEntries;
            UpdateTotalCaloriesText();
        }

        private void AddMeal_Click(object sender, RoutedEventArgs e)
        {
            mealEntries.Add(new MealEntry { MealType = "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–∏–π–æ–º", MealIcon = "üçΩÔ∏è" });
        }

        private void SaveMealsToFile()
        {
            var saveData = new MealPlanData
            {
                Week = WeekPicker.SelectedDate ?? DateTime.Today,
                Goal = GoalTextBox.Text,
                Meals = new List<MealEntry>(mealEntries)
            };

            try
            {
                var serializer = new XmlSerializer(typeof(MealPlanData));
                var filename = $"mealplan_{saveData.Week:yyyyMMdd}.xml";
                using (var writer = new StreamWriter(filename))
                {
                    serializer.Serialize(writer, saveData);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {ex.Message}");
            }
        }

        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            SaveMealsToFile();
            MessageBox.Show("–ü–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
        }

        private void LoadButton_Click(object sender, RoutedEventArgs e)
        {
            var selectedDate = WeekPicker.SelectedDate ?? DateTime.Today;
            var filename = $"mealplan_{selectedDate:yyyyMMdd}.xml";

            if (File.Exists(filename))
            {
                try
                {
                    var serializer = new XmlSerializer(typeof(MealPlanData));
                    using (var reader = new StreamReader(filename))
                    {
                        var loadedData = (MealPlanData)serializer.Deserialize(reader);
                        WeekPicker.SelectedDate = loadedData.Week;
                        GoalTextBox.Text = loadedData.Goal;
                        mealEntries = new ObservableCollection<MealEntry>(loadedData.Meals);
                        MealGrid.ItemsSource = mealEntries;
                        CalculateCalories();
                        UpdateTotalCaloriesText();
                    }
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {ex.Message}");
                }
            }
            else
            {
                MessageBox.Show("–ü–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
            }
        }

        private void MealGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var cellInfo = MealGrid.CurrentCell;
            
            var mealEntry = cellInfo.Item as MealEntry;
            if (mealEntry == null) return;

            string dayOfWeek = cellInfo.Column.Header.ToString();
            string currentValue = GetMealValue(mealEntry, dayOfWeek);

            var editWindow = new EditMealWindow(dayOfWeek, mealEntry.MealType, currentValue);
            if (editWindow.ShowDialog() == true)
            {
                SetMealValue(mealEntry, dayOfWeek, editWindow.MealDescription);

               
                var view = CollectionViewSource.GetDefaultView(MealGrid.ItemsSource);
                if (view is IEditableCollectionView editableView)
                {
                    if (editableView.IsEditingItem)
                        editableView.CommitEdit();
                    if (editableView.IsAddingNew)
                        editableView.CommitNew();
                }

                MealGrid.Items.Refresh();
                CalculateCalories();
                UpdateTotalCaloriesText();
            }
        }

        private string GetMealValue(MealEntry meal, string day)
        {
            switch (day)
            {
                case "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": return meal.Monday;
                case "–í—ñ–≤—Ç–æ—Ä–æ–∫": return meal.Tuesday;
                case "–°–µ—Ä–µ–¥–∞": return meal.Wednesday;
                case "–ß–µ—Ç–≤–µ—Ä": return meal.Thursday;
                case "–ü'—è—Ç–Ω–∏—Ü—è": return meal.Friday;
                case "–°—É–±–æ—Ç–∞": return meal.Saturday;
                case "–ù–µ–¥—ñ–ª—è": return meal.Sunday;
                default: return string.Empty;
            }
        }

        private void SetMealValue(MealEntry mealEntry, string dayOfWeek, string value)
        {
            switch (dayOfWeek)
            {
                case "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫":
                    mealEntry.Monday = value;
                    break;
                case "–í—ñ–≤—Ç–æ—Ä–æ–∫":
                    mealEntry.Tuesday = value;
                    break;
                case "–°–µ—Ä–µ–¥–∞":
                    mealEntry.Wednesday = value;
                    break;
                case "–ß–µ—Ç–≤–µ—Ä":
                    mealEntry.Thursday = value;
                    break;
                case "–ü'—è—Ç–Ω–∏—Ü—è":
                    mealEntry.Friday = value;
                    break;
                case "–°—É–±–æ—Ç–∞":
                    mealEntry.Saturday = value;
                    break;
                case "–ù–µ–¥—ñ–ª—è":
                    mealEntry.Sunday = value;
                    break;
            }
        }

        private void UpdateCalories_Click(object sender, RoutedEventArgs e)
        {
            CalculateCalories();
            UpdateTotalCaloriesText();
        }

        private void CalculateCalories()
        {
            dailyCalories.MondayCalories = CalculateDayCalories("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫");
            dailyCalories.TuesdayCalories = CalculateDayCalories("–í—ñ–≤—Ç–æ—Ä–æ–∫");
            dailyCalories.WednesdayCalories = CalculateDayCalories("–°–µ—Ä–µ–¥–∞");
            dailyCalories.ThursdayCalories = CalculateDayCalories("–ß–µ—Ç–≤–µ—Ä");
            dailyCalories.FridayCalories = CalculateDayCalories("–ü'—è—Ç–Ω–∏—Ü—è");
            dailyCalories.SaturdayCalories = CalculateDayCalories("–°—É–±–æ—Ç–∞");
            dailyCalories.SundayCalories = CalculateDayCalories("–ù–µ–¥—ñ–ª—è");
        }

        private int CalculateDayCalories(string day)
        {
            int total = 0;
            foreach (var mealEntry in mealEntries)
            {
                string meal = GetMealValue(mealEntry, day);
                
                if (!string.IsNullOrEmpty(meal))
                {
                    total += EstimateCaloriesFromText(meal);
                }
            }
            return total;
        }

        private int EstimateCaloriesFromText(string mealText)
        {
            var regex = new System.Text.RegularExpressions.Regex(@"–í—Å—å–æ–≥–æ:\s*(\d+)");
            var match = regex.Match(mealText);

            if (match.Success && int.TryParse(match.Groups[1].Value, out int calories))
            {
                return calories;
            }
            return 0;
        }



        private void UpdateTotalCaloriesText()
        {
            TotalCaloriesText.Text = $"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–∞–ª–æ—Ä—ñ–π: \n" +
                                    $"–ü–æ–Ω–µ–¥—ñ–ª–æ–∫: {dailyCalories.MondayCalories} | " +
                                    $"–í—ñ–≤—Ç–æ—Ä–æ–∫: {dailyCalories.TuesdayCalories} | " +
                                    $"–°–µ—Ä–µ–¥–∞: {dailyCalories.WednesdayCalories} | " +
                                    $"–ß–µ—Ç–≤–µ—Ä: {dailyCalories.ThursdayCalories} | " +
                                    $"–ü'—è—Ç–Ω–∏—Ü—è: {dailyCalories.FridayCalories} | " +
                                    $"–°—É–±–æ—Ç–∞: {dailyCalories.SaturdayCalories} | " +
                                    $"–ù–µ–¥—ñ–ª—è: {dailyCalories.SundayCalories}";
        }

        private void MealGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            if (e.Row.GetIndex() == MealGrid.Items.Count - 1)
            {
                e.Row.Background = new SolidColorBrush(Color.FromRgb(240, 247, 244));
                e.Row.FontWeight = FontWeights.Bold;
            }
        }
    }
}