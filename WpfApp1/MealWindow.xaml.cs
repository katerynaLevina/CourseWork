using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel;
using System.IO;
using System.Linq;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Xml.Serialization;
using System.Windows.Input;
using System.Windows.Media;

namespace WpfApp1
{
    public partial class MealWindow : Window
    {
        private ObservableCollection<MealEntry> mealEntries;
        
        public class NutritionInfo
        {
            public int Calories { get; set; }
            public int Proteins { get; set; }
            public int Fats { get; set; }
            public int Carbs { get; set; }
        }

        public class DailyNutrition
        {
            public NutritionInfo Monday { get; set; } = new();
            public NutritionInfo Tuesday { get; set; } = new();
            public NutritionInfo Wednesday { get; set; } = new();
            public NutritionInfo Thursday { get; set; } = new();
            public NutritionInfo Friday { get; set; } = new();
            public NutritionInfo Saturday { get; set; } = new();
            public NutritionInfo Sunday { get; set; } = new();
        }
        
        private DailyNutrition dailyNutrition = new DailyNutrition();

        // –ø—Ä–∞–≤–∫–∞ 
        public class MealEntry
        {
            public string MealType { get; set; }
            public string MealIcon { get; set; }
            public List<FoodItem> Monday { get; set; } = new();
            public List<FoodItem> Tuesday { get; set; } = new();
            public List<FoodItem> Wednesday { get; set; } = new();
            public List<FoodItem> Thursday { get; set; } = new();
            public List<FoodItem> Friday { get; set; } = new();
            public List<FoodItem> Saturday { get; set; } = new();
            public List<FoodItem> Sunday { get; set; } = new();
            
            private static string GetMealSummary(List<FoodItem> items)
            {
                if (items == null || !items.Any())
                    return "";

                var summary = new System.Text.StringBuilder();
                summary.AppendLine("–î–æ–¥–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏:");

                foreach (var item in items)
                {
                    summary.AppendLine($"{item.Name}: {item.Calories} –∫–∫–∞–ª, –ë: {item.Protein}–≥, –ñ: {item.Fat}–≥, –í: {item.Carbohydrates}–≥");
                }

                return summary.ToString().TrimEnd();
            }

            
            public string MondaySummary => GetMealSummary(Monday);
            public string TuesdaySummary => GetMealSummary(Tuesday);
            public string WednesdaySummary => GetMealSummary(Wednesday);
            public string ThursdaySummary => GetMealSummary(Thursday);
            public string FridaySummary => GetMealSummary(Friday);
            public string SaturdaySummary => GetMealSummary(Saturday);
            public string SundaySummary => GetMealSummary(Sunday);


        }


        public class MealPlanData
        {
            public DateTime Week { get; set; }
            public string Goal { get; set; }
            public List<MealEntry> Meals { get; set; }
        }

        public MealWindow()
        {
            InitializeComponent();
            LoadInitialData();
        }

        private void LoadInitialData()
        {
            mealEntries = new ObservableCollection<MealEntry>
            {
                new MealEntry { MealType = "–°–Ω—ñ–¥–∞–Ω–æ–∫", MealIcon = "üç≥" },
                new MealEntry { MealType = "–û–±—ñ–¥", MealIcon = "üç≤" },
                new MealEntry { MealType = "–ü–µ—Ä–µ–∫—É—Å", MealIcon = "ü•ó" },
                new MealEntry { MealType = "–í–µ—á–µ—Ä—è", MealIcon = "üçΩÔ∏è" }
            };
            MealGrid.ItemsSource = mealEntries;
            UpdateTotalCaloriesText();
        }

        private void AddMeal_Click(object sender, RoutedEventArgs e)
        {
            mealEntries.Add(new MealEntry { MealType = "–î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø—Ä–∏–π–æ–º", MealIcon = "üçΩÔ∏è" });
        }

        
        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            SaveMealsToFile();
            MessageBox.Show("–ü–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
        }

        private DateTime GetStartOfWeek(DateTime date)
        {
            int diff = (7 + (date.DayOfWeek - DayOfWeek.Monday)) % 7;
            return date.AddDays(-diff).Date;
        }

        public class AllMealPlans
        {
            public List<MealPlanData> Plans { get; set; } = new List<MealPlanData>();
        }
        
        private const string AllPlansFileName = "all_mealplans.xml";

        // –ø—Ä–∞–≤–∫–∏ –∞–±–∏ –≤—Å–µ –∑–±–µ—Ä—ñ–≥–∞–ª–æ—Å—å –≤ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—ñ, –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∏–∂–Ω—è
        private void SaveMealsToFile()
        {
            var selectedDate = WeekPicker.SelectedDate ?? DateTime.Today;
            var weekStart = GetStartOfWeek(selectedDate);

            
            AllMealPlans allPlans = new AllMealPlans();

            if (File.Exists(AllPlansFileName))
            {
                try
                {
                    var serializer = new XmlSerializer(typeof(AllMealPlans));
                    using (var reader = new StreamReader(AllPlansFileName))
                    {
                        allPlans = (AllMealPlans)serializer.Deserialize(reader);
                    }
                }
                catch
                {
                    
                    allPlans = new AllMealPlans();
                }
            }

            
            var existingPlan = allPlans.Plans.FirstOrDefault(p => p.Week == weekStart);

            if (existingPlan != null)
            {
                existingPlan.Goal = GoalTextBox.Text;
                existingPlan.Meals = mealEntries.ToList();
            }
            else
            {
                allPlans.Plans.Add(new MealPlanData
                {
                    Week = weekStart,
                    Goal = GoalTextBox.Text,
                    Meals = mealEntries.ToList()
                });
            }
            
            try
            {
                var serializer = new XmlSerializer(typeof(AllMealPlans));
                using (var writer = new StreamWriter(AllPlansFileName))
                {
                    serializer.Serialize(writer, allPlans);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {ex.Message}");
            }
        }


        private void LoadMealsFromFile()
        {
            var selectedDate = WeekPicker.SelectedDate ?? DateTime.Today;
            var weekStart = GetStartOfWeek(selectedDate);

            if (!File.Exists(AllPlansFileName))
            {
                MessageBox.Show("–§–∞–π–ª –ø–ª–∞–Ω—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                return;
            }

            try
            {
                var serializer = new XmlSerializer(typeof(AllMealPlans));
                using (var reader = new StreamReader(AllPlansFileName))
                {
                    var allPlans = (AllMealPlans)serializer.Deserialize(reader);

                    var plan = allPlans.Plans.FirstOrDefault(p => p.Week == weekStart);

                    if (plan != null)
                    {
                        WeekPicker.SelectedDate = plan.Week;
                        GoalTextBox.Text = plan.Goal;
                        mealEntries = new ObservableCollection<MealEntry>(plan.Meals);
                        MealGrid.ItemsSource = mealEntries;

                        CalculateNutrition();
                        UpdateTotalCaloriesText();
                    }
                    else
                    {
                        MessageBox.Show("–ü–ª–∞–Ω —Ö–∞—Ä—á—É–≤–∞–Ω–Ω—è –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ç–∏–∂–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.");
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: {ex.Message}");
            }
        }


        private void LoadButton_Click(object sender, RoutedEventArgs e)
        {
            LoadMealsFromFile();
        }



        private void MealGrid_MouseDoubleClick(object sender, MouseButtonEventArgs e)
        {
            var cellInfo = MealGrid.CurrentCell;
            var mealEntry = cellInfo.Item as MealEntry;
            if (mealEntry == null) return;

            string dayOfWeek = cellInfo.Column?.Header?.ToString();
            if (string.IsNullOrEmpty(dayOfWeek)) return;

            var editWindow = new EditMealWindow(dayOfWeek, mealEntry.MealType, null);
            if (editWindow.ShowDialog() == true)
            {
                SetMealItems(mealEntry, dayOfWeek, new List<FoodItem>(editWindow.SelectedProducts));
                
                if (MealGrid.CommitEdit(DataGridEditingUnit.Row, true))
                {
                    MealGrid.Items.Refresh(); 
                }

                CalculateNutrition();
                UpdateTotalCaloriesText();
            }
        }
        
        
        private List<FoodItem> GetMealItems(MealEntry entry, string day) => day switch
        {
            "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫" => entry.Monday,
            "–í—ñ–≤—Ç–æ—Ä–æ–∫" => entry.Tuesday,
            "–°–µ—Ä–µ–¥–∞" => entry.Wednesday,
            "–ß–µ—Ç–≤–µ—Ä" => entry.Thursday,
            "–ü'—è—Ç–Ω–∏—Ü—è" => entry.Friday,
            "–°—É–±–æ—Ç–∞" => entry.Saturday,
            "–ù–µ–¥—ñ–ª—è" => entry.Sunday,
            _ => new List<FoodItem>()
        };


        private void SetMealItems(MealEntry entry, string day, List<FoodItem> items)
        {
            switch (day)
            {
                case "–ü–æ–Ω–µ–¥—ñ–ª–æ–∫": entry.Monday = items; break;
                case "–í—ñ–≤—Ç–æ—Ä–æ–∫": entry.Tuesday = items; break;
                case "–°–µ—Ä–µ–¥–∞": entry.Wednesday = items; break;
                case "–ß–µ—Ç–≤–µ—Ä": entry.Thursday = items; break;
                case "–ü'—è—Ç–Ω–∏—Ü—è": entry.Friday = items; break;
                case "–°—É–±–æ—Ç–∞": entry.Saturday = items; break;
                case "–ù–µ–¥—ñ–ª—è": entry.Sunday = items; break;
            }
        }


        private void CalculateNutrition()
        {
            dailyNutrition.Monday = CalculateDayNutrition("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫");
            dailyNutrition.Tuesday = CalculateDayNutrition("–í—ñ–≤—Ç–æ—Ä–æ–∫");
            dailyNutrition.Wednesday = CalculateDayNutrition("–°–µ—Ä–µ–¥–∞");
            dailyNutrition.Thursday = CalculateDayNutrition("–ß–µ—Ç–≤–µ—Ä");
            dailyNutrition.Friday = CalculateDayNutrition("–ü'—è—Ç–Ω–∏—Ü—è");
            dailyNutrition.Saturday = CalculateDayNutrition("–°—É–±–æ—Ç–∞");
            dailyNutrition.Sunday = CalculateDayNutrition("–ù–µ–¥—ñ–ª—è");
        }


        // –æ–±—Ä–∞—Ö—É–Ω–æ–∫ –∫–±–∂–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –æ–±'—î–∫—Ç–∏ FoodItem
        private NutritionInfo CalculateDayNutrition(string day)
        {
            var info = new NutritionInfo();
            foreach (var mealEntry in mealEntries)
            {
                var items = GetMealItems(mealEntry, day);
                foreach (var item in items)
                {
                    info.Calories += item.Calories;
                    info.Proteins += (int)Math.Round(item.Protein);
                    info.Fats += (int)Math.Round(item.Fat);
                    info.Carbs += (int)Math.Round(item.Carbohydrates);
                }
            }
            return info;
        }



        private void UpdateTotalCaloriesText()
        {
            string FormatDay(string name, NutritionInfo n) =>
                $"{name}: {n.Calories} –∫–∫–∞–ª, –ë: {n.Proteins}–≥, –ñ: {n.Fats}–≥, –í: {n.Carbs}–≥";

            TotalCaloriesText.Text = "–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞ –¥–µ–Ω—å:\n" +
                                     FormatDay("–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", dailyNutrition.Monday) + "\n" +
                                     FormatDay("–í—ñ–≤—Ç–æ—Ä–æ–∫", dailyNutrition.Tuesday) + "\n" +
                                     FormatDay("–°–µ—Ä–µ–¥–∞", dailyNutrition.Wednesday) + "\n" +
                                     FormatDay("–ß–µ—Ç–≤–µ—Ä", dailyNutrition.Thursday) + "\n" +
                                     FormatDay("–ü'—è—Ç–Ω–∏—Ü—è", dailyNutrition.Friday) + "\n" +
                                     FormatDay("–°—É–±–æ—Ç–∞", dailyNutrition.Saturday) + "\n" +
                                     FormatDay("–ù–µ–¥—ñ–ª—è", dailyNutrition.Sunday);
        }


        private void MealGrid_LoadingRow(object sender, DataGridRowEventArgs e)
        {
            if (e.Row.GetIndex() == MealGrid.Items.Count - 1)
            {
                e.Row.Background = new SolidColorBrush(Color.FromRgb(240, 247, 244));
                e.Row.FontWeight = FontWeights.Bold;
            }
        }
    }
}